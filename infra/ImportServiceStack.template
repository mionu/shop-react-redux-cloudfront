Resources:
  ProductsImportBucket5A10ABB0:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ImportServiceStack/ProductsImportBucket/Resource
  ProductsImportBucketPolicy9DB1BC6F:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ProductsImportBucket5A10ABB0
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              AWS: "*"
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - ProductsImportBucket5A10ABB0
                      - Arn
                  - /*
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - ProductsImportBucket5A10ABB0
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ProductsImportBucket5A10ABB0
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: ImportServiceStack/ProductsImportBucket/Policy/Resource
  ProductsImportBucketAutoDeleteObjectsCustomResource7A685C5B:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: ProductsImportBucket5A10ABB0
    DependsOn:
      - ProductsImportBucketPolicy9DB1BC6F
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ImportServiceStack/ProductsImportBucket/AutoDeleteObjectsCustomResource/Default
  ProductsImportBucketNotifications73BCDE01:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: ProductsImportBucket5A10ABB0
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            Filter:
              Key:
                FilterRules:
                  - Name: prefix
                    Value: uploaded/
            LambdaFunctionArn:
              Fn::GetAtt:
                - parseProductsFileD53FEA83
                - Arn
      Managed: true
      SkipDestinationValidation: false
    DependsOn:
      - ProductsImportBucketAllowBucketNotificationsToImportServiceStackparseProductsFile2187ADD8F5067E51
      - ProductsImportBucketPolicy9DB1BC6F
    Metadata:
      aws:cdk:path: ImportServiceStack/ProductsImportBucket/Notifications/Resource
  ProductsImportBucketAllowBucketNotificationsToImportServiceStackparseProductsFile2187ADD8F5067E51:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - parseProductsFileD53FEA83
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - ProductsImportBucket5A10ABB0
          - Arn
    Metadata:
      aws:cdk:path: ImportServiceStack/ProductsImportBucket/AllowBucketNotificationsToImportServiceStackparseProductsFile2187ADD8
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ImportServiceStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip
      Timeout: 900
      MemorySize: 128
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs20.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: ProductsImportBucket5A10ABB0
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      aws:cdk:path: ImportServiceStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
      aws:asset:path: asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6
      aws:asset:property: Code
  importProductsFileServiceRole05E98DF6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ImportServiceStack/importProductsFile/ServiceRole/Resource
  importProductsFileServiceRoleDefaultPolicy65E41B91:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:Abort*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - ProductsImportBucket5A10ABB0
                      - Arn
                  - /*
        Version: "2012-10-17"
      PolicyName: importProductsFileServiceRoleDefaultPolicy65E41B91
      Roles:
        - Ref: importProductsFileServiceRole05E98DF6
    Metadata:
      aws:cdk:path: ImportServiceStack/importProductsFile/ServiceRole/DefaultPolicy/Resource
  importProductsFile45EA58E8:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: a105ea291cf82edfd5d0016045523ba5def98388f5783d1a12af09474cee5bfb.zip
      Environment:
        Variables:
          BUCKET:
            Ref: ProductsImportBucket5A10ABB0
      Handler: handler.importProductsFile
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - importProductsFileServiceRole05E98DF6
          - Arn
      Runtime: nodejs20.x
      Timeout: 5
    DependsOn:
      - importProductsFileServiceRoleDefaultPolicy65E41B91
      - importProductsFileServiceRole05E98DF6
    Metadata:
      aws:cdk:path: ImportServiceStack/importProductsFile/Resource
      aws:asset:path: asset.a105ea291cf82edfd5d0016045523ba5def98388f5783d1a12af09474cee5bfb
      aws:asset:is-bundled: false
      aws:asset:property: Code
  parseProductsFileServiceRole6D9308D1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ImportServiceStack/parseProductsFile/ServiceRole/Resource
  parseProductsFileD53FEA83:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: a105ea291cf82edfd5d0016045523ba5def98388f5783d1a12af09474cee5bfb.zip
      Environment:
        Variables:
          BUCKET:
            Ref: ProductsImportBucket5A10ABB0
      Handler: handler.parseProductsFile
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - parseProductsFileServiceRole6D9308D1
          - Arn
      Runtime: nodejs20.x
      Timeout: 5
    DependsOn:
      - parseProductsFileServiceRole6D9308D1
    Metadata:
      aws:cdk:path: ImportServiceStack/parseProductsFile/Resource
      aws:asset:path: asset.a105ea291cf82edfd5d0016045523ba5def98388f5783d1a12af09474cee5bfb
      aws:asset:is-bundled: false
      aws:asset:property: Code
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ImportServiceStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: ImportServiceStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |-
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              notification_configuration = props["NotificationConfiguration"]
              managed = props.get('Managed', 'true').lower() == 'true'
              skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'
              stack_id = event['StackId']
              old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
              if managed:
                config = handle_managed(event["RequestType"], notification_configuration)
              else:
                config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
              s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
            def get_id(n):
              n['Id'] = ''
              sorted_notifications = sort_filter_rules(n)
              strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('"Name": "prefix"', '"Name": "Prefix"').replace('"Name": "suffix"', '"Name": "Suffix"')
              return f"{stack_id}-{hash(strToHash)}"
            def with_id(n):
              n['Id'] = get_id(n)
              return n

            external_notifications = {}
            existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
            for t in CONFIGURATION_TYPES:
              if request_type == 'Update':
                  old_incoming_ids = [get_id(n) for n in old.get(t, [])]
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      
              elif request_type == 'Delete':
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]
              elif request_type == 'Create':
                  external_notifications[t] = [n for n in existing_notifications.get(t, [])]
            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            if request_type == 'Delete':
              return external_notifications

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))

          def sort_filter_rules(json_obj):
            if not isinstance(json_obj, dict):
                return json_obj
            for key, value in json_obj.items():
                if isinstance(value, dict):
                    json_obj[key] = sort_filter_rules(value)
                elif isinstance(value, list):
                    json_obj[key] = [sort_filter_rules(item) for item in value]
            if "Filter" in json_obj and "Key" in json_obj["Filter"] and "FilterRules" in json_obj["Filter"]["Key"]:
                filter_rules = json_obj["Filter"]["Key"]["FilterRules"]
                sorted_filter_rules = sorted(filter_rules, key=lambda x: x["Name"])
                json_obj["Filter"]["Key"]["FilterRules"] = sorted_filter_rules
            return json_obj
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.11
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: ImportServiceStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  importapi429AF455:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: This API is used to upload entities to the S3 bucket.
      Name: Import API
    Metadata:
      aws:cdk:path: ImportServiceStack/import-api/Resource
  importapiDeployment77CD807F486ae1686c2fac400362f0ded4150c48:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: This API is used to upload entities to the S3 bucket.
      RestApiId:
        Ref: importapi429AF455
    DependsOn:
      - importapiimportproductsGET3423BD34
      - importapiimportproductsF60FE2E6
      - importapiimport824D70FB
    Metadata:
      aws:cdk:path: ImportServiceStack/import-api/Deployment/Resource
  importapiDeploymentStageprod65C3BA04:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: importapiDeployment77CD807F486ae1686c2fac400362f0ded4150c48
      RestApiId:
        Ref: importapi429AF455
      StageName: prod
    Metadata:
      aws:cdk:path: ImportServiceStack/import-api/DeploymentStage.prod/Resource
  importapiimport824D70FB:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - importapi429AF455
          - RootResourceId
      PathPart: import
      RestApiId:
        Ref: importapi429AF455
    Metadata:
      aws:cdk:path: ImportServiceStack/import-api/Default/import/Resource
  importapiimportproductsF60FE2E6:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: importapiimport824D70FB
      PathPart: products
      RestApiId:
        Ref: importapi429AF455
    Metadata:
      aws:cdk:path: ImportServiceStack/import-api/Default/import/products/Resource
  importapiimportproductsGETApiPermissionImportServiceStackimportapiE0C77F60GETimportproducts593A91BB:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - importProductsFile45EA58E8
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: importapi429AF455
            - /
            - Ref: importapiDeploymentStageprod65C3BA04
            - /GET/import/products
    Metadata:
      aws:cdk:path: ImportServiceStack/import-api/Default/import/products/GET/ApiPermission.ImportServiceStackimportapiE0C77F60.GET..import.products
  importapiimportproductsGETApiPermissionTestImportServiceStackimportapiE0C77F60GETimportproductsE58B9D1C:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - importProductsFile45EA58E8
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: importapi429AF455
            - /test-invoke-stage/GET/import/products
    Metadata:
      aws:cdk:path: ImportServiceStack/import-api/Default/import/products/GET/ApiPermission.Test.ImportServiceStackimportapiE0C77F60.GET..import.products
  importapiimportproductsGET3423BD34:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - importProductsFile45EA58E8
                  - Arn
              - /invocations
      ResourceId:
        Ref: importapiimportproductsF60FE2E6
      RestApiId:
        Ref: importapi429AF455
    Metadata:
      aws:cdk:path: ImportServiceStack/import-api/Default/import/products/GET/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/8VUUWvbMBD+LdVjUb02hTHylrYbFNY1JH0zoVyka6LGlox0TvGE//uQLCUuhULHWJ9kf9/p7rtP0k2Ki29fi/MTeHFnQu7OKrUu/JJA7Di8uEfvLgt/1YodUumZxdrsoZqbSomOTZlER9Z0jDNoydxghYT362cU5NiUbIucrSsjdvN2XSkxEwKdY1N2yjhrIrRAkBkO8f2KXz/poR4flqFY6dk6/sbt47CBT8FX4LBc9byCei2h8NdPeo62Vs4po/mPVgtSRodOWk2qxiSmxtrYbql+ZyBwpqX0twUtK7TpTxiZw1DvlTW6Rp10cc9Ayu9juIyRp2wVyM8oG73KrfdcQV34hamw9Ayca2uUVx2betZYpYVqoJoJYVqdVQwxYcMsZkgVWQ0aNiij/Qodm5b+FdbNbIpdJX0PZp5L5BtU+sQSgdje6kppPHDZtPfJ/9jCX5dKBtyNc3+KYfEuBHU8PasgOm94MIF5k+ctLOWSgDBcNJcl/atEUeEgrufu8hGcQ3LFLCwcGrUBwhfoCr9AR7NGxakUv37B4WFJdMKq5ngAQ99DHL/BpjJdKFr6N6GcQaPSl0UCpY/hbvzaHsxPs1ECqls5OpaP4FHUMTtfEmwwSsrQSHwk+QKdaa3AOOeCjQek9KwBi4eL2ABt52CPA+IdNrsTE/E7pK2Rg68RyeOIqBm4BChNuLEwss5EH90o67Ch7/l168jUB7VR+7jqa35uzV5JtKFPHs8+9K/0ho8z8DzjQqb7lpqWeq6NxOLZfdlPJsXFpDg/eXZKnaXBWyyG9Q+kJLIo9gYAAA==
    Metadata:
      aws:cdk:path: ImportServiceStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  importapiEndpointC6ED36B7:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: importapi429AF455
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: importapiDeploymentStageprod65C3BA04
          - /
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-3
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-3
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-4
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
      - Fn::Equals:
          - Ref: AWS::Region
          - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]

